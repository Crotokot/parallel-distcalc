cmake_minimum_required(VERSION 3.1)

project(distcalc)

set(CMAKE_CXX_STANDARD 17)

if (SANITIZE_BUILD)
    message("Use sanitizer")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -fsanitize=address,undefined -fno-sanitize-recover=all -fsanitize-undefined-trap-on-error -coverage -lgcov -g -Wall -Werror")
    set(CMAKE_CXX_COMPILE_FLAGS "${CMAKE_CXX_FLAGS} -fsanitize=address,undefined -fno-sanitize-recover=all -O0")
endif()
if (VALGRIND_BUILD)
    message("use valgrind")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -coverage -g -Wall -Werror")
    set(CMAKE_CXX_COMPILE_FLAGS "${CMAKE_CXX_FLAGS} -O0")
endif()

file(GLOB SOURCES *.cpp)
include_directories(${PROJECT_SOURCE_DIR})
add_library(${PROJECT_NAME} OBJECT ${SOURCES})
set(PARENT_DIR ${PROJECT_SOURCE_DIR})

if (LIBSEQ_COMPILE)
    message("Compile sequential library")
    add_subdirectory(sequential)
    include_directories(${LIBSEQ_INCLUDE_DIRS})
    set(LIBRARIES ${LIBRARIES} ${LIBSEQ_LIBRARIES})
endif()
if (LIBPAR_COMPILE)
    message("Complile parallel library")
    add_subdirectory(parallel)
    include_directories(${LIBPAR_INCLUDE_DIRS})
    set(LIBRARIES ${LIBRARIES} ${LIBPAR_LIBRARIES})
endif()

get_target_property(INCLUDE_DIRS distcalc INCLUDE_DIRECTORIES)
set(DISTCALC_LIBRARIES ${LIBRARIES} PARENT_SCOPE)
set(DISTCALC_INCLUDE_DIRS ${INCLUDE_DIRS} PARENT_SCOPE)
